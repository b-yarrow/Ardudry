//Brett Yarrow
//Nov 3 2019
//ArduDry

#include <Arduboy2.h>
Arduboy2 arduboy;

bool debugmode; 

#define GAME_TITLE  0
#define GAME_PLAY   1
#define GAME_OVER   2
#define GAME_HIGH   3
int gamestate = GAME_TITLE;
int mapy = 8;
int mapx = 0;

int scrollTitle = 0;

#define SPRITE_X_MAX   128
#define SPRITE_Y_MAX   64

struct PC
{
  char Name[5];
  int alignment;
  int PCclass;
  int AC;
  int HP;
  int Status;
};

struct Party
{
  int facing;
  int Xpos;
  int Ypos;
} party;



const unsigned char titlelrg[280][8] PROGMEM  = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, }, { 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc, }, { 0xc0, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf, }, { 0xf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, }, { 0x00, 0x00, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x1, 0x83, 0xc7, 0xfe, 0xfe, 0xfe, 0x7e, 0x3e, }, { 0xff, 0x3f, 0x1f, 0xf, 0x3, 0x00, 0x00, 0x00, }, { 0x1, 0x00, 0x00, 0x00, 0x40, 0x40, 0xe0, 0xe0, }, { 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x7f, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, }, { 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x1e, 0xf, 0x7, 0x1, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, }, { 0xe0, 0xe0, 0x00, 0x00, 0xf0, 0xfe, 0xff, 0xff, }, { 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, }, { 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x61, 0x27, }, { 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x1, 0x1, 0x83, 0xc7, 0xfe, 0xfe, }, { 0xf0, 0xf8, 0xfe, 0xff, 0xff, 0x1f, 0x7, 0x1, }, { 0xff, 0xff, 0xff, 0x7, 0x00, 0xf0, 0xf0, 0xf0, }, { 0xff, 0xff, 0xff, 0xf8, 0xc0, 0x1, 0x1, 0x1, }, { 0x3f, 0x1f, 0x1f, 0x3f, 0x7f, 0x7f, 0x7e, 0xfc, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xfe, 0x7e, 0x1e, 0xe, 0x7, 0x3, 0x1, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, }, { 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, }, { 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0x60, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x1, 0x3, 0x7, 0xe, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, }, { 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, }, { 0x60, 0x70, 0x30, 0x30, 0x18, 0x18, 0x1c, 0x7e, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, }, { 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, }, { 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf0, 0xf0, 0xf0, }, { 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0x1, 0x1, 0x1, }, { 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x10, 0x30, 0x78, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, }, { 0xf0, 0xf0, 0xf0, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, }, { 0x1, 0x1, 0x1, 0xfd, 0xfd, 0xfd, 0xfd, 0x1, }, { 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x10, 0x18, 0x1c, 0x1e, 0x1f, }, { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, }, { 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0xc1, 0xe1, }, { 0x00, 0x00, 0x18, 0x1c, 0x1e, 0x1f, 0x1f, 0xf, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x1f, 0x1f, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, }, { 0xf0, 0xf0, 0x70, 0x30, 0x90, 0xc0, 0xe0, 0xf0, }, { 0xf1, 0xf8, 0xfe, 0x7f, 0x3f, 0x1f, 0xf, 0x7, }, { 0xf, 0x7, 0x7, 0x6, 0x2, 0x3, 0x3, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x18, 0x18, 0x18, 0x98, 0xf8, 0xf8, 0xf8, 0xf8, }, { 0xf8, 0xfc, 0x7f, 0x3f, 0x9f, 0xcf, 0xe7, 0xf3, }, { 0x1, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, }, { 0x3, 0x3, 0x3, 0x3, 0x6, 0x6, 0x6, 0xe, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xf8, 0x78, 0x38, 0x18, 0x00, 0x00, 0x80, 0xc0, }, { 0xf1, 0xf0, 0xf0, 0xf0, 0xf4, 0xf7, 0xf7, 0xf7, }, { 0x1, 0x1, 0x1, 0x1, 0x5, 0x1d, 0x3d, 0x7d, }, { 0xe, 0x1c, 0x1c, 0x3c, 0x78, 0x78, 0xf8, 0xf0, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xe0, 0xf0, 0xf0, 0xf0, 0x78, 0x38, 0x38, 0x18, }, { 0xf7, 0xf7, 0xf3, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, }, { 0xfd, 0xfd, 0xf1, 0xe1, 0xc1, 0x81, 0x1, 0x1, }, { 0xf0, 0xf1, 0xe1, 0xe1, 0xe3, 0xe3, 0xe3, 0xc3, }, { 0x1, 0x1, 0x1, 0x3, 0x3, 0x3, 0x3, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x38, 0x70, }, { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, }, { 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0x80, 0xc0, }, { 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc1, 0x41, 0x00, }, { 0x3, 0x3, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0x38, 0x00, 0x00, }, { 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf0, }, { 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3, }, { 0x00, 0x1, 0x3, 0x3, 0x3, 0x3, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x8, 0x18, 0x38, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, }, { 0xf0, 0xf0, 0xf0, 0x00, 0x7, 0xff, 0xff, 0xff, }, { 0x3, 0x3, 0x3, 0x00, 0x00, 0xff, 0xff, 0xff, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x3, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xf0, 0xf0, 0xf0, 0x78, 0x38, 0x18, 0x18, 0x18, }, { 0xff, 0x3, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0xff, 0x3e, 0x3c, 0x39, 0x33, 0x33, 0x33, 0x33, }, { 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x18, 0x18, 0x38, 0x38, 0x78, 0xf0, 0xf0, 0xe0, }, { 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe3, 0xef, }, { 0x33, 0x33, 0x73, 0x7b, 0x7b, 0xfb, 0xfb, 0xfb, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xef, 0xef, 0xef, 0xee, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0xcb, 0x83, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, }, { 0x3, 0x7, 0x1f, 0x7e, 0xfe, 0xfc, 0xf8, 0xf0, }, { 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x30, 0x38, 0x3c, 0x3e, 0x3e, 0x3e, }, { 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, }, { 0xe0, 0xe8, 0xee, 0xef, 0xef, 0xef, 0xef, 0xe3, }, { 0x3, 0x1b, 0x3b, 0x7b, 0xfb, 0xfb, 0xf3, 0xe3, }, { 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x1, 0x3, 0x3, }, { 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x3e, 0x7c, 0x78, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, }, { 0xe0, 0xf0, 0x70, 0x70, 0x30, 0x31, 0x11, 0x13, }, { 0xe1, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0xc3, 0x83, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, }, { 0x3, 0x7, 0x7, 0x6, 0x6, 0x6, 0x6, 0x6, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x7, 0xf, 0x1f, 0x3e, 0xfc, 0xfc, 0xf8, 0xe0, }, { 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0x1, 0xf, 0xff, }, { 0x3, 0x3, 0x3, 0x83, 0xe3, 0xe0, 0xf8, 0xff, }, { 0x6, 0x6, 0x7, 0x7, 0x3, 0x3, 0x1, 0x1, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, }, { 0xff, 0xff, 0xff, 0xfc, 0xf0, 0x00, 0x00, 0xe0, }, { 0xff, 0x7f, 0x3f, 0x1f, 0x3, 0x00, 0x00, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, }, { 0xe0, 0x1, 0x7, 0xff, 0xff, 0xff, 0xff, 0x3, }, { 0x3, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x7c, }, { 0x00, 0x00, 0x00, 0x7, 0x7, 0x7, 0x7, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xe0, 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, }, { 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0x78, 0x73, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, }, { 0x00, 0x00, 0x00, 0x8, 0xe, 0xf, 0xf, 0x7, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x30, 0x70, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, }, { 0xe0, 0xe0, 0xe0, 0xe1, 0xe3, 0xef, 0xef, 0xef, }, { 0xe7, 0xf7, 0xf7, 0xf7, 0xf7, 0xb7, 0x97, 0x7, }, { 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x7, 0xf, }, { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, }, { 0x7, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xef, 0xee, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x37, }, { 0x3e, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, }, { 0xe0, 0xc0, 0xc3, 0xc3, 0x83, 0x83, 0x83, 0x3, }, { 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x10, 0x30, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0xe8, 0xee, 0xef, 0xef, 0xef, 0xef, 0xc3, 0xc1, }, { 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xc7, 0x87, 0x7, }, { 0x80, 0x1, 0x3, 0x7, 0x7, 0xf, 0xf, 0xf, }, { 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x7, 0x6, 0x6, 0xc, 0xc, 0x18, 0x18, 0x10, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xe0, 0x70, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, }, { 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, }, { 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, }, { 0x1e, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x30, 0x30, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x10, 0x30, 0x70, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0xc0, 0xc0, 0xc0, 0xc0, 0x1, 0x7, 0xff, 0xff, }, { 0x7, 0x7, 0x7, 0x7, 0x00, 0xc0, 0xff, 0xff, }, { 0x18, 0xc, 0xc, 0x6, 0x3, 0x3, 0xff, 0xff, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, }, { 0x78, 0x38, 0x3c, 0x1e, 0xf, 0xf, 0x7, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xff, 0xff, 0xff, 0x00, 0x00, 0xc0, 0xc0, 0xc0, }, { 0xff, 0xff, 0xff, 0x00, 0x00, 0x7, 0x7, 0x7, }, { 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x20, 0x60, 0xf0, 0xf0, 0xf8, 0xfc, 0xfc, }, { 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1, }, { 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf8, }, { 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x3f, }, { 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, }, { 0x00, 0x8, 0xc, 0x1f, 0x1f, 0x3f, 0x7f, 0x7f, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xf0, 0xe0, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, }, { 0x1f, 0xf, 0x00, 0x00, 0x7, 0x7, 0x7, 0x7, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, }, { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, }, { 0xf, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, }, { 0x7, 0x7, 0x7, 0x7, 0x7, 0x3, 0x3, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, }, { 0x3, 0x3, 0x3, 0x3, 0x3, 0x00, 0x00, 0x3, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, }, { 0x7, 0xf, 0xf, 0x1f, 0x1f, 0x1f, 0xf, 0xf, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x7, 0x3, 0xa, 0xa, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }, 
};

const unsigned char titlesml[48][8] PROGMEM  = {
  { 0x80, 0xe0, 0xf1, 0xf9, 0x1f, 0xf, 0x7, 0x3, },  { 0x1f, 0x3f, 0xff, 0xf0, 0xe0, 0xc3, 0x83, 0x83, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, },  { 0x80, 0xe0, 0xf9, 0xfd, 0x1f, 0x7, 0x3, 0x1, },  { 0x9f, 0xff, 0x7f, 0xf8, 0xe3, 0xc3, 0xc3, 0xc3, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0x00, 0x00, 0x1, 0xff, 0xff, 0xff, 0x00, 0x30, },  { 0xc3, 0xc3, 0x43, 0xff, 0xff, 0xff, 0x3, 0x3, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0xf0, 0xf0, 0x00, 0x30, 0x38, 0x38, 0x38, 0x30, },  { 0x3f, 0x3f, 0x43, 0x63, 0x73, 0x7b, 0x3f, 0x2f, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0xb0, 0xf0, 0xf0, 0xf0, 0x70, 0xb0, 0xc0, 0xe0, },  { 0x37, 0x33, 0x23, 0x63, 0x63, 0xe7, 0xcf, 0xdf, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, },  { 0x70, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xf0, },  { 0xfb, 0xf3, 0xb3, 0xb3, 0xb3, 0x9f, 0x3f, 0x3f, },  { 0x1, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, },  { 0x00, 0x30, 0xf0, 0xf0, 0xf0, 0x30, 0x30, 0x30, },  { 0x37, 0x7, 0x00, 0x3f, 0x3f, 0xf, 0xf, 0xf, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0x30, 0x70, 0xe0, 0xe0, 0x80, 0x00, 0x86, 0xc6, },  { 0x1f, 0x1f, 0x3f, 0x77, 0xe7, 0xc7, 0xcf, 0x9f, },  { 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, },  { 0xe7, 0x67, 0x36, 0x3c, 0x3c, 0x38, 0x70, 0xf0, },  { 0x3f, 0x37, 0x27, 0x27, 0x27, 0x37, 0x3f, 0x3f, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0xc0, 0x80, 0x30, 0x70, 0xf0, 0xe0, 0x60, 0x30, },  { 0x1f, 0xf, 0x7, 0x7, 0x3f, 0x3f, 0x1f, 0x1f, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, },  { 0x30, 0x30, 0x70, 0xe0, 0xe0, 0xc0, 0x00, 0x00, },  { 0x1f, 0x1f, 0x1f, 0x3f, 0x77, 0xe7, 0xc7, 0x8f, },  { 0x1c, 0x1e, 0xe, 0xe, 0xc, 0xd, 0xd, 0xd, },  { 0xf0, 0xf0, 0xe0, 0x60, 0x30, 0x00, 0x30, 0x30, },  { 0xbf, 0x3f, 0x77, 0x67, 0x67, 0x47, 0x47, 0x67, },  { 0x19, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, },  { 0xe0, 0xe0, 0xf0, 0x00, 0x00, 0x4, 0xfe, 0xff, },  { 0x32, 0xff, 0xff, 0x00, 0x7, 0x00, 0xff, 0xff, },  { 0x1c, 0x1f, 0xf, 0x00, 0x00, 0x2, 0x3, 0x7, },  { 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0xf, 0x4, 0x7, 0x7, 0xf, 0xf, 0xf, 0xf, },  { 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0xf, 0xf, 0xf, 0x7, 0x7, 0x7, 0x7, 0x6, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  { 0x6, 0x6, 0x6, 0x6, 0xf, 0xf, 0xf, 0x7, },  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },  
};

const char title_string1[] PROGMEM = "Proving Grounds";
const char title_string2[] PROGMEM = "of";
const char title_string3[] PROGMEM = "The Mad Overlord";
const char title_string4[] PROGMEM = "Welcome to";
const char title_string5[] PROGMEM = "The world of Wizardry";
     
const char * const title_string_table[] PROGMEM =
{
  title_string1,
  title_string2,
  title_string3,
  title_string4,
  title_string5,
};

#define OPEN  0   
#define WALL  1  
#define DOOR  2
#define DARK  3
#define DKWL  4
#define DKDR  5 

#define NORTH   0   
#define WEST    1  
#define SOUTH   2
#define EAST    3

#define MAPDIM 20
//const uint8_t L1[4][9][9] = {  // [FACING][YCORD][XCORD]
const uint8_t L1[20][20] = // [YCORD][XCORD]
{ { 20,68,68,68,68,68,68,132,69,20,2,84,68,68,68,68,68,68,68,5 },{ 17,20,68,68,68,5,20,8,5,16,1,20,68,68,68,68,68,68,5,17 },{ 17,17,20,4,5,17,80,64,65,16,1,17,215,87,151,150,100,5,17,17 },{ 17,17,80,128,65,16,4,4,5,16,1,17,213,86,40,9,21,17,17,17 },{ 17,16,5,25,20,64,64,64,1,16,1,17,213,86,32,1,17,17,17,17 },{ 17,16,1,17,17,20,4,5,17,16,1,17,213,86,160,129,17,17,17,17 },{ 17,16,1,17,17,80,128,65,17,16,1,17,213,85,121,25,17,17,81,17 },{ 17,80,65,17,80,69,25,84,65,80,1,17,85,126,84,65,17,80,68,65 },{ 80,68,68,64,68,68,64,68,70,37,81,80,68,68,68,68,64,68,68,69 },{ 116,68,68,68,68,68,68,68,69,16,4,132,68,132,68,132,68,132,68,69 },{ 84,68,68,68,68,132,68,68,68,0,1,25,21,25,21,25,85,25,84,69 },{ 20,4,5,20,5,25,20,5,149,16,1,17,17,17,17,17,21,17,213,213 },{ 80,128,65,16,66,34,96,65,25,16,65,17,17,17,17,17,145,145,28,13 },{ 85,88,68,1,85,81,84,5,17,16,5,17,17,17,17,17,88,74,96,65 },{ 20,4,5,145,20,4,5,17,17,16,1,17,17,17,17,17,84,69,213,213 },{ 16,0,2,170,32,0,1,17,17,80,1,17,17,17,17,82,100,134,44,13 },{ 80,64,65,25,80,64,65,81,209,21,17,17,17,17,80,69,84,73,80,65 },{ 149,85,149,17,84,69,20,4,13,16,1,17,81,80,68,198,100,70,36,5 },{ 88,71,184,64,132,70,32,0,1,80,1,17,213,213,84,77,20,5,208,193 },{ 84,69,89,85,89,85,80,64,65,84,1,82,108,78,100,70,96,65,93,93 }, };

const uint8_t MASK[2][4] = { { B11000000, B00110000, B00001100, B00000011 },
                             {         6,         4,         2,         0 } };
#define F0    1-1   
#define F0L0  2-1  
#define F0R0  3-1
#define F1L0  4-1
#define F1R0  5-1
#define F1    6-1
#define F0L1  7-1
#define F0R1  8-1
#define F1L1  9-1
#define F1R1  10-1
#define F2    11-1
#define F2L0  12-1
#define F2R0  13-1
#define F3L0  14-1
#define F3R0  15-1
#define F3    16-1
#define F2L1  17-1
#define F2R1  18-1
#define F3L1  19-1
#define F3R1  20-1


uint8_t LOS[20] = { };

void drawWallAhead() {
  arduboy.drawLine(   37,  5,  90,  5);
  arduboy.drawLine(   37, 58,  90, 58);
  arduboy.drawLine(   37,  5,  37, 58);
  arduboy.drawLine(   90,  5,  90, 58);
  if(LOS[F0] == DOOR) {
    arduboy.drawLine(   45, 58,  45, 13);
    arduboy.drawLine(   45, 13,  82, 13);
    arduboy.drawLine(   82, 13,  82, 58);
  }  
}

void drawWall_FWD0_R0() {
  //arduboy.drawLine(  106,  0, 106, 63);
  arduboy.drawLine(  118,  0, 118, 63);
  arduboy.drawLine(   90,  5,  95,  0);
  arduboy.drawLine(   90, 58,  95, 63);
  arduboy.drawLine(   90,  5,  90, 58);
  if( LOS[F0R0] == DOOR ) {
    arduboy.drawLine(   96, 63,  96,  5);
    arduboy.drawLine(   96,  5, 101,  0);
    arduboy.drawLine(  112,  0, 112, 63);
  }
}

void drawWall_FWD0_L0() {
  //arduboy.drawLine(   21,  0,  21, 63);
  arduboy.drawLine(    9,  0,   9, 63);
  arduboy.drawLine(   37,  5,  32,  0);
  arduboy.drawLine(   37, 58,  32, 63);
  arduboy.drawLine(   37,  5,  37, 58);
  if( LOS[F0L0] == DOOR ) {
    arduboy.drawLine(   31, 63,  31,  5);
    arduboy.drawLine(   31,  5,  26,  0);
    arduboy.drawLine(   15,  0,  15, 63);
  }
}

void drawWall_FWD0_R1() {
  if ( LOS[F0R0] == OPEN ) {
    arduboy.drawLine(   90, 58, 127, 58);
    arduboy.drawLine(   90,  5, 127,  5);
    arduboy.drawLine(   90,  5,  90, 58);
    if(LOS[F0R1] == DOOR) {
      arduboy.drawLine(   98, 58,  98, 13);
      arduboy.drawLine(   98, 13, 127, 13);
    } 
  }
  
}

void drawWall_FWD0_L1() {
    if ( LOS[F0L0] == OPEN ) {
    arduboy.drawLine(   37, 58,   0, 58);
    arduboy.drawLine(   37,  5,   0,  5);
    arduboy.drawLine(   37,  5,  37, 58);
      if(LOS[F0L1] == DOOR) {
      arduboy.drawLine(   29, 58,  29, 13);
      arduboy.drawLine(   29, 13,   0, 13);
    } 
  }
}
void drawWall_FWD1(){
  if ( LOS[F0] == OPEN ) {
    arduboy.drawLine(   78, 17,  78, 46);
    arduboy.drawLine(   49, 17,  49, 46);
    arduboy.drawLine(   49, 17,  78, 17);
    arduboy.drawLine(   49, 46,  78, 46);
    if ( LOS[F1] == DOOR ) {
      arduboy.drawLine(   53, 45,  53, 21);
      arduboy.drawLine(   53, 21,  74, 21);
      arduboy.drawLine(   74, 21,  74, 45);
    }
  }
} 

void drawWall_FWD1_R0() {
  if ( LOS[F0] == OPEN ) {
    arduboy.drawLine(   78, 17,  90,  5);
    arduboy.drawLine(   78, 46,  90, 58);
    arduboy.drawLine(   90,  5,  90, 58);
    arduboy.drawLine(   78, 17,  78, 46);
    if( LOS[F1R0] == DOOR ) {
      arduboy.drawLine(   81, 49,  81, 18);
      arduboy.drawLine(   81, 18,  87, 12);
      arduboy.drawLine(   87, 12,  87, 54);
    }
  }
}
void drawWall_FWD1_L0() {
  if ( LOS[F0] == OPEN ) {
    arduboy.drawLine(   49, 17,  37,  5);
    arduboy.drawLine(   49, 46,  37, 58);
    arduboy.drawLine(   37,  5,  37, 58);
    arduboy.drawLine(   49, 17,  49, 46);
    if( LOS[F1L0] == DOOR ) {
      arduboy.drawLine(   46, 49,  46, 18);
      arduboy.drawLine(   46, 18,  40, 12);
      arduboy.drawLine(   40, 12,  40, 54);
    }
  }
}
void drawWall_FWD1_R1() {
  if ( LOS[F0] == OPEN && LOS[F0R0] == OPEN && LOS[F1R0] == OPEN ) {
    arduboy.drawLine(   78, 17,  78, 46);
    arduboy.drawLine(  107, 17, 107, 46);
    arduboy.drawLine(   78, 17, 107, 17);
    arduboy.drawLine(   78, 46, 107, 46);
    if ( LOS[F1R1] == DOOR ) {
      arduboy.drawLine(   82, 45,  82, 21);
      arduboy.drawLine(   82, 21,  103, 21);
      arduboy.drawLine(  103, 21,  103, 45);
    }
  } else if ( LOS[F0] == OPEN && LOS[F0R0] != OPEN && LOS[F1R0] == OPEN ) {
    arduboy.drawLine(   78, 17,  78, 46);
    arduboy.drawLine(   78, 17,  90, 17);
    arduboy.drawLine(   78, 46,  90, 46);
    if ( LOS[F1R1] == DOOR ) {
      arduboy.drawLine(   82, 45,  82, 21);
      arduboy.drawLine(   82, 21,  90, 21);
    }
  }
}
void drawWall_FWD1_L1() {
  if ( LOS[F0] == OPEN && LOS[F0L0] == OPEN && LOS[F1L0] == OPEN ) {
    arduboy.drawLine(   49, 17,  49, 46);
    arduboy.drawLine(   20, 17,  20, 46);
    arduboy.drawLine(   49, 17,  20, 17);
    arduboy.drawLine(   49, 46,  20, 46);
    if ( LOS[F1L1] == DOOR ) {
      arduboy.drawLine(   24, 45,  24, 21);
      arduboy.drawLine(   24, 21,  45, 21);
      arduboy.drawLine(   45, 21,  45, 45);
    }
  } else if ( LOS[F0] == OPEN && LOS[F0L0] != OPEN && LOS[F1L0] == OPEN ) {
    arduboy.drawLine(   49, 17,  49, 46);
    arduboy.drawLine(   49, 17,  37, 17);
    arduboy.drawLine(   49, 46,  37, 46);
    if ( LOS[F1L1] == DOOR ) {
      arduboy.drawLine(   37, 21,  45, 21);
      arduboy.drawLine(   45, 21,  45, 45);
    }
  }
}

void drawdark(){
  //arduboy.fillRect( 37,5,53,53 );
  
  for(int x = 0; x < 27; x++){
    arduboy.drawLine(   37,  58 - x * 2,  90 - x * 2,   5);
    
    arduboy.drawLine(   37 + x * 2,  58,  90,   5 + x * 2);
  }
}

void drawdarkL(){  
  for(int x = 0; x < 27; x++){
    //arduboy.drawLine(    9,  0 + X * 2,   9, 63);
    arduboy.drawLine(   37 ,  5 + x * 2,  32 - x * 2,  0 );
  }
    
    /*
  arduboy.drawLine(   37,  5 + x * 2,  32,  0 + X * 2);
  arduboy.drawLine(   37, 58,  32, 63);
  arduboy.drawLine(   37,  5,  37, 58);*/
}

void drawdarkR(){
  
}


void drawworld() {
  /*
  int ahead = L1[party.facing][party.Ypos][party.Xpos];
  int aheadL;
  int aheadR;
  int left = L1[ (party.facing+1) % 4 ][party.Ypos][party.Xpos];
  int right = L1[ ( ( party.facing-1) + 4 ) % 4 ][party.Ypos][party.Xpos];
 */
  uint8_t mask = MASK[0][party.facing];
  uint8_t shift = MASK[1][party.facing];
 
  LOS[F0] = (L1[party.Ypos][party.Xpos] & MASK[0][party.facing])  >> MASK[1][party.facing];
  LOS[F0L0] = (L1[party.Ypos][party.Xpos] & MASK[0][ (party.facing+1) % 4 ]) >> MASK[1][ (party.facing+1) % 4 ];
  LOS[F0R0] = (L1[party.Ypos][party.Xpos] & MASK[0][ ( ( party.facing-1) + 4 ) % 4 ]) >> MASK[1][ ( ( party.facing-1) + 4 ) % 4 ];

  /*
  switch(party.facing){
    case NORTH:
      LOS[F0R1] = L1[party.facing][party.Ypos][(party.Xpos+1) % MAPDIM];
      LOS[F0L1] = L1[party.facing][party.Ypos][( ( party.Xpos-1 ) + MAPDIM ) % MAPDIM];
      LOS[F1R0] = L1[EAST][(party.Ypos+1) % MAPDIM][party.Xpos];
      LOS[F1L0] = L1[WEST][(party.Ypos+1) % MAPDIM][party.Xpos];
      LOS[F1]   = L1[party.facing][(party.Ypos+1) % MAPDIM][party.Xpos];
      LOS[F1R1] = L1[party.facing][(party.Ypos+1) % MAPDIM][(party.Xpos+1) % MAPDIM];
      LOS[F1L1] = L1[party.facing][(party.Ypos+1) % MAPDIM][( ( party.Xpos-1 ) + MAPDIM ) % MAPDIM];
      break;
    case WEST:
      LOS[F0R1]=  L1[party.facing][(party.Ypos+1) % MAPDIM][party.Xpos];
      LOS[F0L1] = L1[party.facing][((party.Ypos-1 ) + MAPDIM ) % MAPDIM][party.Xpos];
      LOS[F1R0] = L1[NORTH][party.Ypos][((party.Xpos-1) + MAPDIM ) % MAPDIM];
      LOS[F1L0] = L1[SOUTH][party.Ypos][((party.Xpos-1) + MAPDIM ) % MAPDIM];
      LOS[F1]   = L1[party.facing][party.Ypos][((party.Xpos-1) + MAPDIM ) % MAPDIM];
      LOS[F1R1] = L1[party.facing][(party.Ypos+1) % MAPDIM][((party.Xpos-1) + MAPDIM ) % MAPDIM];
      LOS[F1L1] = L1[party.facing][((party.Ypos-1 ) + MAPDIM ) % MAPDIM][((party.Xpos-1) + MAPDIM ) % MAPDIM];
      break;
    case SOUTH:
      LOS[F0R1] = L1[party.facing][party.Ypos][((party.Xpos-1) + MAPDIM ) % MAPDIM];
      LOS[F0L1] = L1[party.facing][party.Ypos][(party.Xpos+1) % MAPDIM];
      LOS[F1R0] = L1[WEST][((party.Ypos-1) + MAPDIM ) % MAPDIM][party.Xpos];
      LOS[F1L0] = L1[EAST][((party.Ypos-1) + MAPDIM ) % MAPDIM][party.Xpos];
      LOS[F1]   = L1[party.facing][((party.Ypos-1) + MAPDIM ) % MAPDIM][party.Xpos];
      LOS[F1R1] = L1[party.facing][((party.Ypos-1) + MAPDIM ) % MAPDIM][((party.Xpos-1) + MAPDIM ) % MAPDIM];
      LOS[F1L1] = L1[party.facing][((party.Ypos-1) + MAPDIM ) % MAPDIM][(party.Xpos+1) % MAPDIM];
      break;
    case EAST:
      LOS[F0R1] = L1[party.facing][((party.Ypos-1) + MAPDIM ) % MAPDIM][party.Xpos];
      LOS[F0L1] = L1[party.facing][(party.Ypos+1) % MAPDIM][party.Xpos];
      LOS[F1R0] = L1[SOUTH][party.Ypos][(party.Xpos+1) % MAPDIM];
      LOS[F1L0] = L1[NORTH][party.Ypos][(party.Xpos+1) % MAPDIM];
      LOS[F1]   = L1[party.facing][party.Ypos][(party.Xpos+1) % MAPDIM];
      LOS[F1R1] = L1[party.facing][((party.Ypos-1) + MAPDIM ) % MAPDIM][(party.Xpos+1) % MAPDIM];
      LOS[F1L1] = L1[party.facing][(party.Ypos+1) % MAPDIM][(party.Xpos+1) % MAPDIM];
      break;
  }
*/
  
  switch(LOS[F0]){
    case WALL:
    case DOOR:
      drawWallAhead();
      break;
    case DARK:
    case DKWL:
    case DKDR:
     drawdark();  
  }
    switch(LOS[F0R0]){
    case WALL:
    case DOOR:
      drawWall_FWD0_R0();
  }
  switch(LOS[F0L0]){
    case WALL:
    case DOOR:
      drawWall_FWD0_L0();
      break;
    case DARK:
      drawdarkL(); 
  }
  switch(LOS[F0R1]){
    case WALL:
    case DOOR:
      drawWall_FWD0_R1();
  }
  switch(LOS[F0L1]){
    case WALL:
    case DOOR:
      drawWall_FWD0_L1();
  }
  switch(LOS[F1]){
    case WALL:
    case DOOR:
      drawWall_FWD1();
  }
  switch(LOS[F1R0]){
    case WALL:
    case DOOR:
      drawWall_FWD1_R0();
  }
  switch(LOS[F1L0]){
    case WALL:
    case DOOR:
      drawWall_FWD1_L0();
  }
  switch(LOS[F1]){
    case WALL:
      drawWall_FWD1();
  }
  switch(LOS[F1R1]){
    case WALL:
    case DOOR:
      drawWall_FWD1_R1();
  }
    switch(LOS[F1L1]){
    case WALL:
    case DOOR:
      drawWall_FWD1_L1();
  }
      arduboy.setCursor(0, HEIGHT - 8);
      //arduboy.print(party.facing);
      switch(party.facing){
        case NORTH:
          arduboy.print("N");
          break;
        case EAST:
          arduboy.print("E");
          break;
        case SOUTH:
          arduboy.print("S");
          break;
        case WEST:
          arduboy.print("W");
          break;
      }
      arduboy.print(",");
      arduboy.print(party.Xpos);
      arduboy.print(",");
      arduboy.print(party.Ypos);
      arduboy.print(",");
      arduboy.print(LOS[F0]);  
//    }
//  }
}




void playerinput() {
  if(arduboy.justPressed(UP_BUTTON)) {
    if(LOS[F0] != WALL && LOS[F0] != DKWL ) {
      switch(party.facing){
        case NORTH:
          party.Ypos = (party.Ypos+1) % MAPDIM;
          break;

        case WEST:
          party.Xpos = ( ( party.Xpos-1 ) +MAPDIM ) % MAPDIM;
          break;
  
        case SOUTH:
          party.Ypos = ( ( party.Ypos-1 ) + MAPDIM ) % MAPDIM;
          break;
  
        case EAST:
          party.Xpos = (party.Xpos+1) % MAPDIM;
          break;
       }
    }

  }
  if(arduboy.justPressed(DOWN_BUTTON)) {
    party.facing = ( party.facing + 2 ) % 4; 
  }
  if(arduboy.justPressed(LEFT_BUTTON)) {
    party.facing = ( party.facing + 1 ) % 4; 
  }
  
  if(arduboy.justPressed(RIGHT_BUTTON)) {
    party.facing = ( ( party.facing - 1 ) + 4 ) % 4; 
  }
  if(arduboy.justPressed(B_BUTTON)) {
    //debugmode = !debugmode;
  }
}
/*
void listparty(){
  struct PC PC1 = {.Name = "JACK", .alignment = 1 , .PCclass = 1, .AC = -10 , .HP = 10 , .Status = 0};
  arduboy.setCursor(0,8);
  arduboy.print("# CHAR CLASS  AC HP S\n");
  arduboy.print("1 ");
  arduboy.print(PC1.Name);
  arduboy.print(" ");
  switch(PC1.alignment){
    case -1:
      arduboy.print("E");
      break;
    case 0:
      arduboy.print("N");
      break;
    case 1:
      arduboy.print("G");
      break;
  }
  arduboy.print("-");
    switch(PC1.PCclass){
    case 1:
      arduboy.print("FIG");
      break;
    case 2:
      arduboy.print("PRI");
      break;
    case 3:
      arduboy.print("MAG");
      break;
    case 4:
      arduboy.print("THI");
      break;
    case 5:
      arduboy.print("LOR");
      break;
    case 6:
      arduboy.print("SAM");
      break;
    case 7:
      arduboy.print("BIS");
      break;
    case 8:
      arduboy.print("NIN");
      break;
  }
  arduboy.print(" ");
  arduboy.print(PC1.AC);
  arduboy.print(" ");
  arduboy.print(PC1.HP);
  //arduboy.print("1");
}
*/
void titlescreen() {
//  if(gamestate == GAME_TITLE) {
//        gamestate = GAME_PLAY;
//        return;
//  } 
  //arduboy.setCursor(0, 0);
  //arduboy.print("Title Screen\n");

  if(scrollTitle > -314 + WIDTH) {
    for(int x = 0; x < 40; x++) {
      for(int y = 0; y < 7; y++) {
        arduboy.drawBitmap(( scrollTitle ) + x*8, y*8, titlelrg[x*7+y], 8, 8, WHITE);
      }
    }
    scrollTitle -= 1;
  } else {
    for(int x = 0; x < 16; x++) {
      for(int y = 0; y < 3; y++) {
        arduboy.drawBitmap( x*8, y*8, titlesml[x*3+y], 8, 8, WHITE);
      }
      arduboy.setCursor(0,24);
      int pixwidth;
      char t_buffer[22];

     for(int idx = 0; idx < 5; idx++) {
        arduboy.setCursor((WIDTH/2)-((strlen_P((char*)pgm_read_word(&(title_string_table[idx])))*6)/2),arduboy.getCursorY());
        arduboy.println(strcpy_P(t_buffer, (char*)pgm_read_word(&(title_string_table[idx]))));
     }
/*
      //pixwidth = strlen("Proving Grounds") * 6 - 1;
      arduboy.setCursor( 20 ,arduboy.getCursorY() );
      arduboy.println(strcpy_P(t_buffer, (char*)pgm_read_word(&(title_string_table[0]))));
      //arduboy.print("Proving Grounds\n");
      
      //pixwidth = strlen("of") * 6 - 1;
      arduboy.setCursor( 59 ,arduboy.getCursorY() );
      arduboy.println(strcpy_P(t_buffer, (char*)pgm_read_word(&(title_string_table[1]))));
      //arduboy.print("of\n");

      //pixwidth = strlen("The Mad Overlord") * 6 - 1;
      arduboy.setCursor( 17 ,arduboy.getCursorY() );
      arduboy.println(strcpy_P(t_buffer, (char*)pgm_read_word(&(title_string_table[2]))));
      //arduboy.print("The Mad Overlord\n");

      //pixwidth = strlen("Welcome to") * 6 - 1;
      arduboy.setCursor( 35 ,arduboy.getCursorY() );
      arduboy.println(strcpy_P(t_buffer, (char*)pgm_read_word(&(title_string_table[3]))));
      //arduboy.print("Welcome to\n");

      //pixwidth = strlen("The world of Wizardry") * 6 - 1;
      arduboy.setCursor( 2 ,arduboy.getCursorY() );
      arduboy.println(strcpy_P(t_buffer, (char*)pgm_read_word(&(title_string_table[4]))));
      //arduboy.print("The world of Wizardry"); 
      //arduboy.print("Super DUper Pooper Scooper"); */
    } 
  }

  
  //arduboy.setCursor(0, HEIGHT - 8);
  //arduboy.print(scrollTitle);
  if(arduboy.justPressed(A_BUTTON)) {
    gamestate = GAME_PLAY;
    scrollTitle = 0;
  }
}

void gameplay() {
  playerinput();
  drawworld();
  //listparty();
  //drawplayer();
  
  if(arduboy.justPressed(A_BUTTON)) {
    gamestate = GAME_OVER;
  }
}

void gameoverscreen() {
  arduboy.setCursor(0, 0);
  arduboy.print("Game Over Screen\n");
  if(arduboy.justPressed(A_BUTTON)) {
    gamestate = GAME_HIGH;
  }
}

void highscorescreen() {
  arduboy.setCursor(0, 0);
  arduboy.print("High Score Screen\n");
  if(arduboy.justPressed(A_BUTTON)) {
    gamestate = GAME_TITLE;
  }
}

void gameloop() {
  switch(gamestate) {
    case GAME_TITLE:
      titlescreen();
      break;

    case GAME_PLAY:
      gameplay();
      break;

    case GAME_OVER:
      gameoverscreen();
      break;

    case GAME_HIGH:
      highscorescreen();
      break;
  }
}


void setup() {
  arduboy.begin();
  arduboy.setFrameRate(45);
  arduboy.display();

  arduboy.initRandomSeed();
  
  arduboy.clear();
  debugmode = 0;
  party = { .facing = 0 , .Xpos = 0, .Ypos = 0 };

}

void loop() {
  if(!(arduboy.nextFrame())) {
    return;
  }

  arduboy.pollButtons();

  arduboy.clear();

  gameloop();
  
  arduboy.display();

}
